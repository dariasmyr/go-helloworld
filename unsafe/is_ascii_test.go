package unsafe

import (
	"testing"
	"unsafe"
)

// isASCIIFast –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –±–∞–π—Ç–æ–≤—ã–π —Å—Ä–µ–∑ –¢–û–õ–¨–ö–û ASCII-—Å–∏–º–≤–æ–ª—ã (–±–∞–π—Ç—ã —Å –º–ª–∞–¥—à–∏–º–∏ 7 –±–∏—Ç–∞–º–∏).
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç unsafe –∏ –ø–æ–±–∏—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞ 64-–±–∏—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.
func isASCIIFast(s []byte) bool {
	n := len(s)
	i := 0

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ä–µ–∑ –±–ª–æ–∫–∞–º–∏ –ø–æ 8 –±–∞–π—Ç (uint64), –ø–æ–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ:
	for ; i+8 <= n; i += 8 {
		// –ß—Ç–µ–Ω–∏–µ 8 –±–∞–π—Ç –∫–∞–∫ –æ–¥–Ω–æ–≥–æ uint64 –±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (unsafe).
		block := *(*uint64)(unsafe.Pointer(&s[i]))

		// –ï—Å–ª–∏ –≤ –∫–∞–∫–æ–º-–ª–∏–±–æ –∏–∑ 8 –±–∞–π—Ç —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç (0x80) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —ç—Ç–æ –ù–ï ASCII.
		// –ú–∞—Å–∫–∞ 0x8080808080808080 –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç –≤ –∫–∞–∂–¥–æ–º –±–∞–π—Ç–µ –±–ª–æ–∫–∞.
		if block&0x8080808080808080 != 0 {
			return false
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞–π—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É:
	for ; i < n; i++ {
		// –ï—Å–ª–∏ —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –Ω–µ ASCII.
		if s[i]&0x80 != 0 {
			return false
		}
	}

	// –í—Å–µ –±–∞–π—Ç—ã –∏–º–µ–ª–∏ —Å—Ç–∞—Ä—à–∏–π –±–∏—Ç = 0 ‚Üí —ç—Ç–æ ASCII.
	return true
}

// isAllRunesASCII –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –±–∞–π—Ç–æ–≤—ã–π —Å—Ä–µ–∑ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –¢–û–õ–¨–ö–û ASCII‚Äë—Ä—É–Ω–∞–º–∏.
// –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ—à–∞–≥–æ–≤—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é UTF-8 –∏ —Å—á–∏—Ç–∞–µ—Ç –ª—é–±—É—é –º–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤—É—é —Ä—É–Ω—É –ù–ï ASCII.
func isAllRunesASCII(b []byte) bool {
	for i := 0; i < len(b); {
		first := b[i]

		// 1) ASCII-—Ä—É–Ω–∞: –ø–µ—Ä–≤—ã–π –±–∏—Ç —Ä–∞–≤–µ–Ω 0 ‚Üí –æ–¥–∏–Ω–æ—á–Ω—ã–π –±–∞–π—Ç (—Å—Ç–∞–Ω–¥–∞—Ä—Ç ASCII).
		if first&0x80 == 0 {
			i++
			continue
		}

		// 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏–Ω—É UTF-8-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –±–∞–π—Ç—É:
		//    110xxxxx ‚Üí 2 –±–∞–π—Ç–∞
		//    1110xxxx ‚Üí 3 –±–∞–π—Ç–∞
		//    11110xxx ‚Üí 4 –±–∞–π—Ç–∞
		var n int
		switch {
		case first&0xE0 == 0xC0:
			n = 2
		case first&0xF0 == 0xE0:
			n = 3
		case first&0xF8 == 0xF0:
			n = 4
		default:
			// –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–≤—ã–π –±–∞–π—Ç UTF-8 (–Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∏ –≤ –æ–¥–∏–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω).
			return false
		}

		// 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –±–∞–π—Ç –≤ —Å—Ä–µ–∑–µ –¥–ª—è –≤—Å–µ–π —Ä—É–Ω—ã.
		if i+n > len(b) {
			return false
		}

		// 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞–π—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ä–º–∞—Ç—É 10xxxxxx (UTF-8 continuation bytes).
		for j := 1; j < n; j++ {
			if b[i+j]&0xC0 != 0x80 {
				return false
			}
		}

		// 5) –õ—é–±–∞—è –º–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤–∞—è —Ä—É–Ω–∞ ‚â† ASCII ‚Üí —Å—Ä–∞–∑—É false.
		return false
	}

	// –í—Å–µ —Å–∏–º–≤–æ–ª—ã –ø—Ä–æ—à–ª–∏ –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–µ ASCII-—Ä—É–Ω—ã.
	return true
}

func isASCIIPlain(s []byte) bool {
	for _, b := range s {
		if b&0x80 != 0 {
			return false
		}
	}
	return true
}

func isASCIIBytesIndex(s []byte) bool {
	for i := range s {
		if s[i] >= 0x80 { // equal to s[i] >= 128
			return false
		}
	}
	return true
}

func TestIsASCIIFast(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		expected bool
	}{
		{"Empty string", "", true},
		{"ASCII only", "Hello, World!", true},
		{"Extended Latin √©", "Caf√©", false},
		{"Cyrillic", "–ü—Ä–∏–≤–µ—Ç", false},
		{"Emoji", "üòÄ", false},
		{"Mixed ASCII and Unicode", "Hello, ‰∏ñÁïå", false},
		{"All ASCII boundary", string([]byte{0x00, 0x7F}), true},
		{"Non-ASCII boundary", string([]byte{0x00, 0x80}), false},
		{"Long ASCII string", "This is a long ASCII string with 128 characters! ................................................................", true},
		{"Long string with Unicode", "This is a long string with Unicode: –ü—Ä–∏–≤–µ—Ç –º–∏—Ä!", false},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := isASCIIFast([]byte(tt.input))
			if result != tt.expected {
				t.Errorf("isASCIIFast(%q) = %v; want %v", tt.input, result, tt.expected)
			}
		})
	}
}

func BenchmarkIsASCIIFast(b *testing.B) {
	data := make([]byte, 1024*1024) // 1MB ASCII
	for i := 0; i < len(data); i++ {
		data[i] = 'A'
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		if !isASCIIFast(data) {
			b.Fatal("failed")
		}
	}
}

func BenchmarkIsASCIIBytesIndex(b *testing.B) {
	data := make([]byte, 1024*1024)
	for i := 0; i < len(data); i++ {
		data[i] = 'A'
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		if !isASCIIBytesIndex(data) {
			b.Fatal("failed")
		}
	}
}

func BenchmarkIsASCIIPlain(b *testing.B) {
	data := make([]byte, 1024*1024)
	for i := 0; i < len(data); i++ {
		data[i] = 'A'
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		if !isASCIIPlain(data) {
			b.Fatal("failed")
		}
	}
}

func BenchmarkIsAllRunesASCII(b *testing.B) {
	data := make([]byte, 1024*1024)
	for i := 0; i < len(data); i++ {
		data[i] = 'A'
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		if !isAllRunesASCII(data) {
			b.Fatal("failed")
		}
	}
}
