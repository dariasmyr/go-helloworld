package main

import (
	"fmt"
	"log"
	"net/http"
	"strings"
)

// Simple func that we pass in a DefaultHandler as ServeHTTP func
func helloHandler(w http.ResponseWriter, r *http.Request) {
	name := r.URL.Query().Get("name")
	if name == "" {
		name = "World"
	}
	fmt.Fprintf(w, "Hello, %s \n", name)
}

// Simple func that we pass in a DefaultHandler as ServeHTTP func
func userHandler(w http.ResponseWriter, r *http.Request) {
	parts := strings.Split(r.URL.Path, "/")
	if len(parts) <= 3 {
		id := parts[2]
		fmt.Fprintf(w, "User ID %s \n", id)
	} else {
		http.Error(w, "Missing user ID", http.StatusBadRequest)
	}

}

// Custom handler (ServeHTTP isntead on anonym func in http.HandleFunc)
type AuthHandler struct {
	secret string
}

func (a *AuthHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Auth you with my custom auth handler and secret %s! \n", a.secret)
}

func logRequestsMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		log.Printf("Received request: %s %s", r.Method, r.URL.Path)
		next.ServeHTTP(w, r)
	})
}

func main() {
	// Create http multiplexer to call handlers for particular routes
	mux := http.NewServeMux()

	// Register just func for handler (that will be generated by Go)
	mux.HandleFunc("/user/", userHandler)

	// Register the helloHandler function wrapped with the logRequestsMiddleware. To create a http.Handler type we use http.HandlerFunc (an adapter to allow the use of ordinary functions as HTTP handlers)
	mux.Handle("/hello", logRequestsMiddleware(http.HandlerFunc(helloHandler)))

	// Create custom handler (ant struct that implements http.Handler interface (has ServeHTTP func))
	customHandler := &AuthHandler{secret: "foo"}
	// Register mux as ServeMux (HTTP request multiplexer)
	mux.Handle("/auth", customHandler)

	server := &http.Server{
		Addr: ":8080",
		// Use the mux as the request handler
		Handler: mux,
	}

	log.Println("Server is running on http://localhost:8080")
	log.Fatal(server.ListenAndServe())
}
